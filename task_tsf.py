# -*- coding: utf-8 -*-
"""Task- TSF

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1juoHXJ8sAlvkBZaHQlcxPAzVGdOjOxng

# Task 6 Prediction using Decision Tree Algorithm
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/gdrive')
# %cd /gdrive

cd /gdrive/My Drive/Sparks foundation

pip install utils

import numpy as np, pandas as pd, matplotlib.pyplot as plt, pydotplus
from sklearn import tree, metrics, model_selection, preprocessing
from IPython.display import Image, display
import utils as ut
from sklearn.preprocessing import LabelEncoder
import seaborn as sns

iris = pd.read_csv('Iris.csv')

iris.head(10)

iris.describe()

iris.isnull().sum()

iris['Species'].unique()

le=LabelEncoder()
iris['Species_type']=le.fit_transform(iris['Species'])

df = iris.loc[iris['Species_type']=='0']
print(df.head(20))

#Let's visualize our data
plt.figure(figsize=(12,8)) 
sns.heatmap(iris.corr(),annot=True,cmap=plt.cm.Spectral)

plt.bar(iris['Species_type'],iris['Species'])

iris.corr()

# Decision Tree's
from sklearn.tree import DecisionTreeClassifier

classifier = DecisionTreeClassifier()

classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)

# Summary of the predictions made by the classifier
print(classification_report(y_test, y_pred))
print(confusion_matrix(y_test, y_pred))
# Accuracy score
from sklearn.metrics import accuracy_score
print('accuracy is',accuracy_score(y_pred,y_test))

y = iris['Species_type']
X = iris[['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']]

from sklearn import tree, metrics, model_selection, preprocessing
# split data randomly into 70% training and 30% test
X_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size=0.3, random_state=0)

# train the decision tree
dtree = tree.DecisionTreeClassifier(criterion='entropy', max_depth=3, random_state=0)
dtree.fit(X_train, y_train)

# use the model to make predictions with the test data
y_pred = dtree.predict(X_test)

# how did our model perform?
count_misclassified = (y_test != y_pred).sum()
print('Misclassified samples: {}'.format(count_misclassified))
accuracy = metrics.accuracy_score(y_test, y_pred)
print('Accuracy: {:.2f}%'.format(accuracy*100))

dot_data = tree.export_graphviz(dtree, out_file=None, filled=True, rounded=True,
                                feature_names=['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm'	],  
                                class_names=['Iris-setosa', 'Iris-versicolor', 'Iris-virginica'])
graph = pydotplus.graph_from_dot_data(dot_data)  
display(Image(graph.create_png()))

inpt1=float(input("Enter Sepal Length (in cm) "))
inpt2=float(input("Enter Sepal Width (in cm) "))
inpt3=float(input("Enter Petal Length (in cm) "))
inpt4=float(input("Enter Petal Width (in cm) "))

# sample inputs : 4.6,3.4,1.4,0.3

pred =  dtree.predict([[inpt1,inpt2,inpt3,inpt4]])
print('The predicted class is : ')
if(pred==0):
  print("Iris-setosa")
if(pred==1):
  print('Iris-versicolor')
if(pred==2):
  print('Iris-virginica')

